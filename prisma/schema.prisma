// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name String
  password String
  address1 String
  address2 String?
  city String
  postcode String
  orders Order[]
  reviews Review[]
}

model Restaurant {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  logo String
  name String
  email String @unique
  description String?
  password String
  minOrderAmount Float
  deliveryFee Float
  address1 String
  address2 String?
  city String
  postcode String
  stripeSecretKey String // Handling payments
  stripePublicKey String
  menu Item[]
  orders Order[] // Orders placed on this restaurant
  reviews Review[]
}

model Item {
  id Int @id @default(autoincrement())
  image String?
  name String
  price Float
  description String?
  category String
  restaurant Restaurant @relation(references: [id], fields: [restaurantId])
  restaurantId Int
  orderItems OrderItem[]
}

model Order {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  completedAt DateTime? // when the order has been completed
  user User @relation(references: [id], fields: [userId])
  userId Int
  items OrderItem[]
  restaurant Restaurant @relation(references: [id], fields: [restaurantId])
  restaurantId Int
  note String
}

model OrderItem {
  id String @id @default(cuid())
  quantity Int // How many items
  item Item @relation(references: [id], fields: [itemId])
  itemId Int
  order Order @relation(references: [id], fields: [orderId], onDelete: Cascade)
  orderId String
}

model Review {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  rating Int // out of 5
  description String
  restaurant Restaurant @relation(references: [id], fields: [restaurantId])
  restaurantId Int
  user User @relation(references: [id], fields: [userId])
  userId Int
}
